/**
 * @fileoverview Definitions for the Google Chrome Extensions™' APIs.
 * This document was generated by 'Get an Externs File of Google Chrome Extensions™' APIs for Closure Compiler™'
 * ( http://sites.google.com/site/mdeveloperk/en/googlechromeextensions/externchromeapis )
 * based on http://code.google.com/chrome/extensions/beta/
 *
 * User Agent : Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.151 Safari/534.16
 * Time : Tue Mar 22 2011 04:07:48 GMT+0900 (Japan Standard Time)
 * @externs
 */
var chrome = {};
chrome.bookmarks = {};
chrome.bookmarks.onChanged;
chrome.bookmarks.onChildrenReordered;
chrome.bookmarks.onCreated;
chrome.bookmarks.onImportBegan;
chrome.bookmarks.onImportEnded;
chrome.bookmarks.onMoved;
chrome.bookmarks.onRemoved;
chrome.bookmarks.create = function(bookmark, opt_callback) {};
chrome.bookmarks.get = function(idOrIdList, callback) {};
chrome.bookmarks.getChildren = function(id, callback) {};
chrome.bookmarks.getRecent = function(numberOfItems, callback) {};
chrome.bookmarks.getTree = function(callback) {};
chrome.bookmarks.move = function(id, destination, opt_callback) {};
chrome.bookmarks.remove = function(id, opt_callback) {};
chrome.bookmarks.removeTree = function(id, opt_callback) {};
chrome.bookmarks.search = function(query, callback) {};
chrome.bookmarks.update = function(id, changes, opt_callback) {};
chrome.browserAction = {};
chrome.browserAction.onClicked;
chrome.browserAction.setBadgeBackgroundColor = function(details) {};
chrome.browserAction.setBadgeText = function(details) {};
chrome.browserAction.setIcon = function(details) {};
chrome.browserAction.setPopup = function(details) {};
chrome.browserAction.setTitle = function(details) {};
chrome.contextMenus = {};
chrome.contextMenus.create = function(createProperties, opt_callback) {};
chrome.contextMenus.remove = function(menuItemId, opt_callback) {};
chrome.contextMenus.removeAll = function(opt_callback) {};
chrome.contextMenus.update = function(id, updateProperties, opt_callback) {};
chrome.cookies = {};
chrome.cookies.onChanged;
chrome.cookies.get = function(details, callback) {};
chrome.cookies.getAll = function(details, callback) {};
chrome.cookies.getAllCookieStores = function(callback) {};
chrome.cookies.remove = function(details) {};
chrome.cookies.set = function(details) {};
chrome.extension = {};
chrome.extension.lastError;
chrome.extension.inIncognitoContext;
chrome.extension.onConnect;
chrome.extension.onConnectExternal;
chrome.extension.onRequest;
chrome.extension.onRequestExternal;
chrome.extension.connect = function(opt_extensionId, opt_connectInfo) {};
chrome.extension.getBackgroundPage = function() {};
chrome.extension.getURL = function(path) {};
chrome.extension.getViews = function(opt_fetchProperties) {};
chrome.extension.sendRequest = function(opt_extensionId, request, opt_responseCallback) {};
chrome.extension.setUpdateUrlData = function(data) {};
chrome.history = {};
chrome.history.onVisitRemoved;
chrome.history.onVisited;
chrome.history.addUrl = function(details) {};
chrome.history.deleteAll = function(callback) {};
chrome.history.deleteRange = function(range, callback) {};
chrome.history.deleteUrl = function(details) {};
chrome.history.getVisits = function(details, callback) {};
chrome.history.search = function(query, callback) {};
chrome.i18n = {};
chrome.i18n.getAcceptLanguages = function(callback) {};
chrome.i18n.getMessage = function(messageName, opt_substitutions) {};
chrome.idle = {};
chrome.idle.onStateChanged;
chrome.idle.queryState = function(thresholdSeconds, callback) {};
chrome.management = {};
chrome.management.onDisabled;
chrome.management.onEnabled;
chrome.management.onInstalled;
chrome.management.onUninstalled;
chrome.management.get = function(id, opt_callback) {};
chrome.management.getAll = function(opt_callback) {};
chrome.management.launchApp = function(id, opt_callback) {};
chrome.management.setEnabled = function(id, enabled, opt_callback) {};
chrome.management.uninstall = function(id, opt_callback) {};
chrome.omnibox = {};
chrome.omnibox.onInputCancelled;
chrome.omnibox.onInputChanged;
chrome.omnibox.onInputEntered;
chrome.omnibox.onInputStarted;
chrome.omnibox.setDefaultSuggestion = function(suggestion) {};
chrome.pageAction = {};
chrome.pageAction.onClicked;
chrome.pageAction.hide = function(tabId) {};
chrome.pageAction.setIcon = function(details) {};
chrome.pageAction.setPopup = function(details) {};
chrome.pageAction.setTitle = function(details) {};
chrome.pageAction.show = function(tabId) {};
chrome.tabs = {};
chrome.tabs.onAttached;
chrome.tabs.onCreated;
chrome.tabs.onDetached;
chrome.tabs.onMoved;
chrome.tabs.onRemoved;
chrome.tabs.onSelectionChanged;
chrome.tabs.onUpdated;
chrome.tabs.captureVisibleTab = function(opt_windowId, opt_options, callback) {};
chrome.tabs.connect = function(tabId, opt_connectInfo) {};
chrome.tabs.create = function(createProperties, opt_callback) {};
chrome.tabs.detectLanguage = function(opt_tabId, callback) {};
chrome.tabs.executeScript = function(opt_tabId, details, opt_callback) {};
chrome.tabs.get = function(tabId, callback) {};
chrome.tabs.getAllInWindow = function(opt_windowId, callback) {};
chrome.tabs.getCurrent = function(callback) {};
chrome.tabs.getSelected = function(opt_windowId, callback) {};
chrome.tabs.insertCSS = function(opt_tabId, details, opt_callback) {};
chrome.tabs.move = function(tabId, moveProperties, opt_callback) {};
chrome.tabs.remove = function(tabId, opt_callback) {};
chrome.tabs.sendRequest = function(tabId, request, opt_responseCallback) {};
chrome.tabs.update = function(tabId, updateProperties, opt_callback) {};
chrome.windows = {};
chrome.windows.WINDOW_ID_NONE;
chrome.windows.onCreated;
chrome.windows.onFocusChanged;
chrome.windows.onRemoved;
chrome.windows.create = function(opt_createData, opt_callback) {};
chrome.windows.get = function(windowId, callback) {};
chrome.windows.getAll = function(opt_getInfo, callback) {};
chrome.windows.getCurrent = function(callback) {};
chrome.windows.getLastFocused = function(callback) {};
chrome.windows.remove = function(windowId, opt_callback) {};
chrome.windows.update = function(windowId, updateInfo, opt_callback) {};
chrome.experimental.clipboard = {};
chrome.experimental.clipboard.executeCopy = function(tabId, opt_callback) {};
chrome.experimental.clipboard.executeCut = function(tabId, opt_callback) {};
chrome.experimental.clipboard.executePaste = function(tabId, opt_callback) {};
chrome.experimental.infobars = {};
chrome.experimental.infobars.show = function(details, opt_callback) {};
chrome.experimental.processes = {};
chrome.experimental.processes.onUpdated;
chrome.experimental.processes.getProcessIdForTab = function(tabId, callback) {};
chrome.experimental.proxy = {};
chrome.experimental.proxy.useCustomProxySettings = function(config) {};
chrome.experimental.sidebar = {};
chrome.experimental.sidebar.onStateChanged;
chrome.experimental.sidebar.collapse = function(opt_details) {};
chrome.experimental.sidebar.expand = function(opt_details) {};
chrome.experimental.sidebar.getState = function(opt_details, callback) {};
chrome.experimental.sidebar.hide = function(opt_details) {};
chrome.experimental.sidebar.navigate = function(details) {};
chrome.experimental.sidebar.setBadgeText = function(details) {};
chrome.experimental.sidebar.setIcon = function(details) {};
chrome.experimental.sidebar.setTitle = function(details) {};
chrome.experimental.sidebar.show = function(opt_details) {};
chrome.experimental.webNavigation = {};
chrome.experimental.webNavigation.onBeforeNavigate;
chrome.experimental.webNavigation.onBeforeRetarget;
chrome.experimental.webNavigation.onCommitted;
chrome.experimental.webNavigation.onCompleted;
chrome.experimental.webNavigation.onDOMContentLoaded;
chrome.experimental.webNavigation.onErrorOccurred;
chrome.experimental.webRequest = {};
chrome.experimental.webRequest.onBeforeRedirect;
chrome.experimental.webRequest.onBeforeRequest;
chrome.experimental.webRequest.onCompleted;
chrome.experimental.webRequest.onErrorOccurred;
chrome.experimental.webRequest.onHeadersReceived;
chrome.experimental.webRequest.onRequestSent;
function BookmarkTreeNode() {}
BookmarkTreeNode.prototype.id;
BookmarkTreeNode.prototype.parentId;
BookmarkTreeNode.prototype.index;
BookmarkTreeNode.prototype.url;
BookmarkTreeNode.prototype.title;
BookmarkTreeNode.prototype.dateAdded;
BookmarkTreeNode.prototype.dateGroupModified;
BookmarkTreeNode.prototype.children;
function OnClickData() {}
OnClickData.prototype.menuItemId;
OnClickData.prototype.parentMenuItemId;
OnClickData.prototype.mediaType;
OnClickData.prototype.linkUrl;
OnClickData.prototype.srcUrl;
OnClickData.prototype.pageUrl;
OnClickData.prototype.frameUrl;
OnClickData.prototype.selectionText;
OnClickData.prototype.editable;
function Cookie() {}
Cookie.prototype.name;
Cookie.prototype.value;
Cookie.prototype.domain;
Cookie.prototype.hostOnly;
Cookie.prototype.path;
Cookie.prototype.secure;
Cookie.prototype.httpOnly;
Cookie.prototype.session;
Cookie.prototype.expirationDate;
Cookie.prototype.storeId;
function CookieStore() {}
CookieStore.prototype.id;
CookieStore.prototype.tabIds;
function MessageSender() {}
MessageSender.prototype.tab;
MessageSender.prototype.id;
function Event() {}
Event.prototype.addListener = function() {};
Event.prototype.removeListener = function() {};
Event.prototype.hasListener = function() {};
Event.prototype.hasListeners = function() {};
function Port() {}
Port.prototype.name;
Port.prototype.onDisconnect;
Port.prototype.onMessage;
Port.prototype.postMessage = function() {};
Port.prototype.sender;
function HistoryItem() {}
HistoryItem.prototype.id;
HistoryItem.prototype.url;
HistoryItem.prototype.title;
HistoryItem.prototype.lastVisitTime;
HistoryItem.prototype.visitCount;
HistoryItem.prototype.typedCount;
function VisitItem() {}
VisitItem.prototype.id;
VisitItem.prototype.visitId;
VisitItem.prototype.visitTime;
VisitItem.prototype.referringVisitId;
VisitItem.prototype.transition;
function IconInfo() {}
IconInfo.prototype.size;
IconInfo.prototype.url;
function ExtensionInfo() {}
ExtensionInfo.prototype.id;
ExtensionInfo.prototype.name;
ExtensionInfo.prototype.description;
ExtensionInfo.prototype.version;
ExtensionInfo.prototype.enabled;
ExtensionInfo.prototype.isApp;
ExtensionInfo.prototype.appLaunchUrl;
ExtensionInfo.prototype.optionsUrl;
ExtensionInfo.prototype.icons;
ExtensionInfo.prototype.permissions;
ExtensionInfo.prototype.hostPermissions;
function SuggestResult() {}
SuggestResult.prototype.content;
SuggestResult.prototype.description;
function Tab() {}
Tab.prototype.id;
Tab.prototype.index;
Tab.prototype.windowId;
Tab.prototype.selected;
Tab.prototype.pinned;
Tab.prototype.url;
Tab.prototype.title;
Tab.prototype.favIconUrl;
Tab.prototype.status;
Tab.prototype.incognito;
function Window() {}
Window.prototype.id;
Window.prototype.focused;
Window.prototype.top;
Window.prototype.left;
Window.prototype.width;
Window.prototype.height;
Window.prototype.tabs;
Window.prototype.incognito;
Window.prototype.type;
function Process() {}
Process.prototype.id;
Process.prototype.type;
Process.prototype.cpu;
Process.prototype.network;
Process.prototype.privateMemory;
Process.prototype.sharedMemory;
function ProxyServer() {}
ProxyServer.prototype.scheme;
ProxyServer.prototype.host;
ProxyServer.prototype.port;
function ProxyRules() {}
ProxyRules.prototype.singleProxy;
ProxyRules.prototype.proxyForHttp;
ProxyRules.prototype.proxyForHttps;
ProxyRules.prototype.proxyForFtp;
ProxyRules.prototype.socksProxy;
function PacScript() {}
PacScript.prototype.url;
function ProxyConfig() {}
ProxyConfig.prototype.rules;
ProxyConfig.prototype.pacScript;
ProxyConfig.prototype.mode;

